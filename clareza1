/*
Project: Clareza Emocional
Purpose: React web app with mood tracking, daily notes, AI-based empathetic response, history, i18n (PT/EN/ES), ready for deployment on Vercel via GitHub.
Structure:
  package.json
  public/
    index.html
    favicon.ico (optional)
  src/
    index.js
    App.js
    i18n.js
    locales/
      en.json
      pt.json
      es.json
    components/
      LanguageSelector.js
      Affirmation.js
      MoodTracker.js
      NoteSection.js
      History.js
      BotResponse.js
    styles.css
*/

// package.json
{
  "name": "clareza-emocional",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "i18next": "^22.4.9",
    "react-i18next": "^13.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }
}

// public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Clareza Emocional</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles.css';
import './i18n';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<React.StrictMode><App /></React.StrictMode>);

// src/i18n.js
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import en from './locales/en.json';
import pt from './locales/pt.json';
import es from './locales/es.json';

const resources = {
  en: { translation: en },
  pt: { translation: pt },
  es: { translation: es },
};

i18n.use(initReactI18next).init({
  resources,
  lng: navigator.language.split('-')[0] || 'pt',
  fallbackLng: 'pt',
  interpolation: { escapeValue: false },
});

export default i18n;

// src/locales/en.json
{
  "app_title": "Emotional Clarity",
  "affirmation_title": "Daily Affirmation",
  "generate_affirmation": "Generate Affirmation",
  "reflection_title": "Reflection of the Day",
  "reflection_placeholder": "What did you feel today? Any body signals?...",
  "save_reflection": "Save Reflection",
  "note_title": "Personal Note",
  "note_placeholder": "What do you need from yourself today?",
  "save_note": "Save Note",
  "mood_title": "How are you feeling today?",
  "history_title": "Mood & Notes History",
  "dates": "Date",
  "mood": "Mood",
  "note": "Note",
  "bot_disclaimer": "This response is generated by AI based on psychology and does not replace a human therapist. No data is stored.",
  "privacy_notice": "Private and Secure",
  "language": "Language"
}

// src/locales/pt.json
{
  "app_title": "Clareza Emocional",
  "affirmation_title": "Afirma√ß√£o do Dia",
  "generate_affirmation": "Gerar Afirma√ß√£o",
  "reflection_title": "Reflex√£o do Dia",
  "reflection_placeholder": "O que sentiste hoje? O que teu corpo indicou?...",
  "save_reflection": "Guardar Reflex√£o",
  "note_title": "Nota Pessoal",
  "note_placeholder": "O que precisas de ti hoje?",
  "save_note": "Guardar Nota",
  "mood_title": "Como te sentes hoje?",
  "history_title": "Hist√≥rico de Mood e Notas",
  "dates": "Data",
  "mood": "Humor",
  "note": "Nota",
  "bot_disclaimer": "Esta resposta √© gerada por IA com base em psicologia e n√£o substitui um terapeuta humano. Nenhum dado √© guardado.",
  "privacy_notice": "Privado e Seguro",
  "language": "Idioma"
}

// src/locales/es.json
{
  "app_title": "Claridad Emocional",
  "affirmation_title": "Afirmaci√≥n del D√≠a",
  "generate_affirmation": "Generar Afirmaci√≥n",
  "reflection_title": "Reflexi√≥n del D√≠a",
  "reflection_placeholder": "¬øQu√© sentiste hoy? ¬øQu√© te dijo tu cuerpo?...",
  "save_reflection": "Guardar Reflexi√≥n",
  "note_title": "Nota Personal",
  "note_placeholder": "¬øQu√© necesitas de ti hoy?",
  "save_note": "Guardar Nota",
  "mood_title": "¬øC√≥mo te sientes hoy?",
  "history_title": "Historial de Estado y Notas",
  "dates": "Fecha",
  "mood": "Estado",
  "note": "Nota",
  "bot_disclaimer": "Esta respuesta es generada por IA basada en psicolog√≠a y no reemplaza a un terapeuta humano. Ning√∫n dato se guarda.",
  "privacy_notice": "Privado y Seguro",
  "language": "Idioma"
}

// src/styles.css
body {
  margin: 0;
  font-family: Arial, sans-serif;
  background: #F5F5F5;
  color: #333;
}
.container {
  max-width: 600px;
  margin: auto;
  padding: 1rem;
}
.card {
  background: #FFF;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 1rem;
  padding: 1rem;
}
button {
  background: #4A90E2;
  color: #FFF;
  border: none;
  border-radius: 8px;
  padding: 0.5rem 1rem;
  cursor: pointer;
}
button:disabled {
  background: #CCC;
  cursor: not-allowed;
}
select {
  padding: 0.5rem;
  border-radius: 8px;
  border: 1px solid #CCC;
  margin-bottom: 1rem;
}
textarea, input[type="text"] {
  width: 100%;
  padding: 0.5rem;
  border-radius: 8px;
  border: 1px solid #CCC;
  margin-bottom: 0.5rem;
  resize: vertical;
}
.tracker {
  display: flex;
  justify-content: space-around;
  margin-bottom: 0.5rem;
}
.tracker span {
  font-size: 2rem;
  cursor: pointer;
}
.history-table {
  width: 100%;
  border-collapse: collapse;
}
.history-table th, .history-table td {
  border: 1px solid #EEE;
  padding: 0.5rem;
  text-align: left;
}

// src/components/LanguageSelector.js
import React from 'react';
import { useTranslation } from 'react-i18next';

export default function LanguageSelector() {
  const { i18n, t } = useTranslation();
  const changeLanguage = (lng) => {
    i18n.changeLanguage(lng);
  };
  return (
    <div className="card">
      <label>{t('language')}:</label>
      <select onChange={(e) => changeLanguage(e.target.value)} value={i18n.language}>
        <option value="pt">Portugu√™s</option>
        <option value="en">English</option>
        <option value="es">Espa√±ol</option>
      </select>
    </div>
  );
}

// src/components/Affirmation.js
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';

const affirmationsList = [
  "Tenho o direito de sentir tudo o que estou a sentir.",
  "N√£o preciso decidir tudo agora ‚Äì posso dar-me tempo.",
  "A minha paz interior vale mais do que manter uma rela√ß√£o incerta.",
  "Se for para ser, ser√° com clareza e escolha m√∫tua.",
  "Estou a aprender a amar-me ao mesmo tempo que cuido das minhas feridas."
];

export default function Affirmation() {
  const { t } = useTranslation();
  const [affirmation, setAffirmation] = useState('');
  const generate = () => {
    const random = affirmationsList[Math.floor(Math.random() * affirmationsList.length)];
    setAffirmation(random);
  };
  return (
    <div className="card">
      <h2>{t('affirmation_title')}</n      <button onClick={generate}>{t('generate_affirmation')}</button>
      <p><em>{affirmation}</em></p>
    </div>
  );
}

// src/components/MoodTracker.js
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

const moods = ['üòÄ', 'üôÇ', 'üòê', 'üòî', 'üò£'];

export default function MoodTracker({ onMoodSelect }) {
  const { t } = useTranslation();
  const [selected, setSelected] = useState(null);
  useEffect(() => {
    if (selected) onMoodSelect(selected);
  }, [selected]);
  return (
    <div className="card">
      <h2>{t('mood_title')}</n      <div className="tracker">
        {moods.map((m, i) => (
          <span key={i} onClick={() => setSelected(m)} style={{ opacity: selected === m ? 1 : 0.5 }}>
            {m}
          </span>
        ))}
      </div>
    </div>
  );
}

// src/components/NoteSection.js
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import BotResponse from './BotResponse';

export default function NoteSection({ mood, onSave }) {
  const { t } = useTranslation();
  const [note, setNote] = useState('');
  const [showBot, setShowBot] = useState(false);
  const handleSave = () => {
    onSave(note, mood);
    setShowBot(true);
  };
  return (
    <div className="card">
      <h2>{t('note_title')}</h2>
      <textarea placeholder={t('note_placeholder')} value={note} onChange={(e) => setNote(e.target.value)} />
      <button onClick={handleSave} disabled={!note || !mood}>{t('save_note')}</button>
      {showBot && <BotResponse note={note} />}
    </div>
  );
}

// src/components/BotResponse.js
import React from 'react';
import { useTranslation } from 'react-i18next';

export default function BotResponse({ note }) {
  const { t } = useTranslation();
  // Simple stubbed response - in a real app, integrate AI here
  const response = `Entendo que digitas: "${note}". O que sentes √© v√°lido. Respira fundo e lembra que cuidar de ti √© importante.`;
  return (
    <div className="card">
      <h3>ClarezaBot</h3>
      <p>{t('bot_disclaimer')}</p>
      <p>{response}</p>
    </div>
  );
}

// src/components/History.js
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';

export default function History() {
  const { t } = useTranslation();
  const [records, setRecords] = useState([]);

  useEffect(() => {
    const data = JSON.parse(localStorage.getItem('records') || '[]');
    setRecords(data);
  }, []);

  return (
    <div className="card">
      <h2>{t('history_title')}</n      <table className="history-table">
        <thead>
          <tr>
            <th>{t('dates')}</th>
            <th>{t('mood')}</th>
            <th>{t('note')}</th>
          </tr>
        </thead>
        <tbody>
          {records.map((r, i) => (
            <tr key={i}>
              <td>{new Date(r.date).toLocaleDateString()}</td>
              <td>{r.mood}</td>
              <td>{r.note}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

// src/App.js
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import LanguageSelector from './components/LanguageSelector';
import Affirmation from './components/Affirmation';
import MoodTracker from './components/MoodTracker';
import NoteSection from './components/NoteSection';
import History from './components/History';

export default function App() {
  const { t } = useTranslation();
  const [mood, setMood] = useState(null);

  const saveRecord = (note, mood) => {
    const newRecord = { date: Date.now(), mood, note };
    const existing = JSON.parse(localStorage.getItem('records') || '[]');
    localStorage.setItem('records', JSON.stringify([newRecord, ...existing]));
  };

  return (
    <div className="container">
      <h1>{t('app_title')}</h1>
      <LanguageSelector />
      <Affirmation />
      <MoodTracker onMoodSelect={setMood} />
      <NoteSection mood={mood} onSave={saveRecord} />
      <History />
    </div>
  );
}
